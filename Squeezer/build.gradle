buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'de.mobilej.unmock:UnMockPlugin:0.6.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.github.triplet.play'
apply plugin: 'uk.org.ngo.gradle.whatsnew'
apply plugin: 'de.mobilej.unmock'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    // Android support libraries
    // Note: these libraries require the "Google Repository" and "Android
    //       Support Repository" to be installed via the SDK manager.
    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-annotations:$rootProject.supportLibraryVersion"

    // Third party libraries
    compile 'com.google.guava:guava:20.0'

    // findbugs is required for Proguard to work with Guava.
    compile 'com.google.code.findbugs:jsr305:2.0.2'

    // EventBus, https://github.com/greenrobot/EventBus.
    compile 'de.greenrobot:eventbus:2.4.1'

    // Changelogs, see https://github.com/cketti/ckChangeLog.
    compile 'de.cketti.library.changelog:ckchangelog:1.2.0'

    // Crashlytics.
    compile('com.crashlytics.sdk.android:crashlytics:2.6.7@aar') {
        transitive = true
    }

    // KitKat time picker
    compile 'com.nineoldandroids:library:2.4.0'
    compile project(':libs:datetimepicker')

    // JVM tests
    testCompile 'junit:junit:4.12'

    // Guava test utilities for androidTest
    testCompile 'com.google.guava:guava-testlib:20.0'
    testCompile 'com.google.code.findbugs:jsr305:2.0.2'

    // AutoValue
    provided 'com.google.auto.value:auto-value:1.4-rc2'
    apt 'com.google.auto.value:auto-value:1.4-rc2'
    apt 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'
    apt 'com.gabrielittner.auto.value:auto-value-with:1.0.0'
    // For javax.annotation.Generated / autovalue @Memoized
    provided 'org.glassfish:javax.annotation:10.0-b28'

    // @Contract annotations.
    compile 'org.jetbrains:annotations-java5:15.0'

    unmock 'org.robolectric:android-all:4.3_r2-robolectric-0'
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    def gitHash = "git rev-parse --short HEAD".execute().text.trim()
    def hasModifiedDeletedOrOtherFiles = !"git ls-files -mdo --exclude-standard".execute().text.trim().isEmpty()
    def hasStagedFiles = !"git diff-index --no-ext-diff --name-only --cached HEAD".execute().text.trim().isEmpty()
    def dirtyWorkingCopy = hasModifiedDeletedOrOtherFiles || hasStagedFiles
    def gitDescription = dirtyWorkingCopy ? "${gitHash}-dirty" : gitHash

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        buildConfigField "String", "GIT_DESCRIPTION", "\"${gitDescription}\""

        versionCode 61
        versionName "1.5.1"
    }

    lintOptions {
        // Downgrade missing translations to non-fatal severity.
        warning 'MissingTranslation'
    }

    signingConfigs {
        if (project.hasProperty("Squeezer.properties")
                && file(project.property("Squeezer.properties")).exists()) {
            Properties props = new Properties()
            props.load(new FileInputStream(file(project.property("Squeezer.properties"))))
            release {
                storeFile file("keystore")
                storePassword props['key.store.password']
                keyAlias "squeezer"
                keyPassword props['key.alias.password']
            }
        } else {
            release {
                storeFile file("squeezer-local-release-key.keystore")
                storePassword "squeezer"
                keyAlias "squeezer"
                keyPassword "squeezer"
            }
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            // You could use 'proguardFile "proguard.cfg"' here and get the
            // same effect, but this ensures that any changes to
            // proguard-android-optimize.txt are automatically included.
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile "proguard-crashlytics.cfg"
            proguardFile "proguard-eventbus.cfg"
            proguardFile "proguard-guava.cfg"
            proguardFile "proguard-squeezer.cfg"
        }
    }
}

def publishTrack() {
    switch (android.defaultConfig.versionName) {
        case ~/.*-beta-\d+/:
            return 'beta'
        case ~/\d+\.\d+\.\d+/:
            return 'production'
    }
    throw new IllegalArgumentException("versionName '${versionName}' is not valid")
}

whatsnew {
    changelogPath = 'Squeezer/src/main/res/xml/changelog_master.xml'
    newsPath = 'NEWS'
    if (publishTrack() == 'beta') {
        whatsnewPath = 'Squeezer/src/release/play/en-US/whatsnew-beta'
    } else {
        whatsnewPath = 'Squeezer/src/release/play/en-US/whatsnew'
    }
}

play {
    jsonFile = file('key.json')
    track = publishTrack()
    untrackOld = true
}

unMock {
    keep "android.widget.BaseAdapter"
    keep "android.widget.ArrayAdapter"
    keep "android.os.Bundle"
    keepStartingWith "android.database.MatrixCursor"
    keep "android.database.AbstractCursor"
    keep "android.database.CrossProcessCursor"
    keepStartingWith "android.text.TextUtils"
    keepStartingWith "android.util."
    keepStartingWith "android.text."
    keepStartingWith "android.content.ContentValues"
    keepStartingWith "android.content.ComponentName"
    keepStartingWith "android.content.ContentUris"
    keepStartingWith "android.content.ContentProviderOperation"
    keepStartingWith "android.content.ContentProviderResult"
    keepStartingWith "android.content.UriMatcher"
    keepStartingWith "android.content.Intent"
    keep "android.location.Location"
    keepStartingWith "android.content.res.Configuration"
    keepStartingWith "org."
    keepStartingWith "libcore."
    keepStartingWith "com.android.internal.R"
    keepStartingWith "com.android.internal.util."
    keep "android.net.Uri"

    keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
}